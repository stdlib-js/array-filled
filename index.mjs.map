{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport ctors from '@stdlib/array-ctors';\nimport gfill from '@stdlib/blas-ext-base-gfill';\nimport filled from '@stdlib/array-base-filled';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport iterLength from '@stdlib/iter-length';\nimport defaults from '@stdlib/array-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// FUNCTIONS //\n\n/**\n* Creates a filled \"generic\" array from an iterator.\n*\n* @private\n* @param {Iterator} it - iterator\n* @param {*} value - fill value\n* @returns {Array} filled array\n*/\nfunction filledIterator( it, value ) {\n\tvar arr;\n\tvar v;\n\n\tarr = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tarr.push( value );\n\t}\n\treturn arr;\n}\n\n/**\n* Fills an array exposing accessors for getting and setting array elements.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {*} value - fill value\n* @returns {Collection} input array\n*/\nfunction filledAccessors( arr, value ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tarr.set( value, i );\n\t}\n\treturn arr;\n}\n\n\n// MAIN //\n\n/**\n* Creates a filled array.\n*\n* @param {*} [value] - fill value\n* @param {(NonNegativeInteger|TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a recognized data type\n* @throws {TypeError} must provide a length, typed array, array-like object, buffer, or iterable\n* @throws {Error} creating a generic array from an `ArrayBuffer` is not supported\n* @returns {(TypedArray|Array|ComplexArray)} array or typed array\n*\n* @example\n* var arr = filledarray();\n* // returns <Float64Array>\n*\n* @example\n* var arr = filledarray( 1.0, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, 2, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, 2, 'generic' );\n* // returns [ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1.0, [ 0.5, 0.5 ] );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr = filledarray( 1, [ 5, -3 ], 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*\n* @example\n* var arr1 = filledarray( 2, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 1.0, arr1 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* var arr1 = filledarray( 2, [ 5, 3 ], 'int32' );\n* var arr2 = filledarray( 1, arr1, 'uint32' );\n* // returns <Uint32Array>[ 1, 1 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8 );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = filledarray( 1.0, buf, 8, 'float32' );\n* // returns <Float32Array>[ 1.0, 1.0 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1.0, buf, 8, 2 );\n* // returns <Float64Array>[ 1.0, 1.0 ]\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = filledarray( 1, buf, 8, 2, 'int32' );\n* // returns <Int32Array>[ 1, 1 ]\n*/\nfunction filledarray() {\n\tvar value;\n\tvar nargs;\n\tvar dtype;\n\tvar ctor;\n\tvar arr;\n\tvar len;\n\tvar arg;\n\n\tnargs = arguments.length;\n\tnargs -= 1;\n\tif ( nargs >= 0 && isString( arguments[ nargs ] ) ) {\n\t\tdtype = arguments[ nargs ];\n\t\tnargs -= 1;\n\t} else {\n\t\tdtype = DEFAULT_DTYPE;\n\t}\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( '00j2Y', dtype ) );\n\t}\n\tif ( dtype === 'generic' ) {\n\t\tif ( nargs <= 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tvalue = arguments[ 0 ];\n\t\targ = arguments[ 1 ];\n\t\tif ( nargs === 1 ) {\n\t\t\tif ( isNonNegativeInteger( arg ) ) {\n\t\t\t\tlen = arg;\n\t\t\t} else if ( isCollection( arg ) ) {\n\t\t\t\tlen = arg.length;\n\t\t\t}\n\t\t\tif ( len !== void 0 ) {\n\t\t\t\treturn filled( value, len );\n\t\t\t}\n\t\t\tif ( isArrayBuffer( arg ) ) {\n\t\t\t\tthrow new Error( format('00j04') );\n\t\t\t}\n\t\t\tif ( isObject( arg ) ) {\n\t\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\t\tthrow new TypeError( format( '00j2Z', arg ) );\n\t\t\t\t}\n\t\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t\t\t}\n\t\t\t\targ = arg[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( arg.next ) ) {\n\t\t\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t\t\t}\n\t\t\t\treturn filledIterator( arg, value );\n\t\t\t}\n\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tthrow new Error( format('00j04') );\n\t\t}\n\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t}\n\tif ( nargs <= 0 ) {\n\t\treturn new ctor( 0 );\n\t}\n\tif ( nargs === 1 ) { // length || array-like || ArrayBuffer || iterable\n\t\targ = arguments[ 1 ];\n\t\tif ( isCollection( arg ) ) {\n\t\t\tarr = new ctor( arg.length );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tarr = new ctor( arg );\n\t\t} else if ( isNonNegativeInteger( arg ) ) {\n\t\t\tarr = new ctor( arg );\n\t\t} else if ( isObject( arg ) ) {\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( '00j2Z', arg ) );\n\t\t\t}\n\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t\t}\n\t\t\targ = arg[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( arg.next ) ) {\n\t\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t\t}\n\t\t\tarr = new ctor( iterLength( arg ) );\n\t\t} else {\n\t\t\tthrow new TypeError( format( '00j2a', arg ) );\n\t\t}\n\t} else if ( nargs === 2 ) {\n\t\tarr = new ctor( arguments[1], arguments[2] ); // (ArrayBuffer, byteOffset)\n\t} else {\n\t\tarr = new ctor( arguments[1], arguments[2], arguments[3] ); // (ArrayBuffer, byteOffset, length)\n\t}\n\tif ( arr.length > 0 ) {\n\t\tif ( /^complex/.test( dtype ) ) {\n\t\t\tfilledAccessors( arr, arguments[ 0 ] );\n\t\t} else {\n\t\t\tgfill( arr.length, arguments[ 0 ], arr, 1 );\n\t\t}\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filledarray;\n"],"names":["HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","DEFAULT_DTYPE","defaults","get","filledarray","value","nargs","dtype","ctor","arr","len","arg","arguments","length","isString","ctors","TypeError","format","isNonNegativeInteger","isCollection","filled","isArrayBuffer","Error","isObject","isFunction","ITERATOR_SYMBOL","next","it","done","push","filledIterator","iterLength","test","i","set","filledAccessors","gfill"],"mappings":";;+zCAwCA,IAAIA,EAAsBC,IACtBC,EAAgBC,EAASC,IAAK,kBAwIlC,SAASC,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAWJ,GATAL,EAAQM,UAAUC,QAClBP,GAAS,IACK,GAAKQ,EAAUF,UAAWN,KACvCC,EAAQK,UAAWN,GACnBA,GAAS,GAETC,EAAQN,EAGK,QADdO,EAAOO,EAAOR,IAEb,MAAM,IAAIS,UAAWC,EAAQ,QAASV,IAEvC,GAAe,YAAVA,EAAsB,CAC1B,GAAKD,GAAS,EACb,MAAO,GAIR,GAFAD,EAAQO,UAAW,GACnBD,EAAMC,UAAW,GACF,IAAVN,EAAc,CAMlB,GALKY,EAAsBP,GAC1BD,EAAMC,EACKQ,EAAcR,KACzBD,EAAMC,EAAIE,aAEE,IAARH,EACJ,OAAOU,EAAQf,EAAOK,GAEvB,GAAKW,EAAeV,GACnB,MAAM,IAAIW,MAAOL,EAAO,UAEzB,GAAKM,EAAUZ,GAAQ,CACtB,IAA6B,IAAxBZ,EACJ,MAAM,IAAIiB,UAAWC,EAAQ,QAASN,IAEvC,IAAMa,EAAYb,EAAKc,IACtB,MAAM,IAAIT,UAAWC,EAAQ,QAASN,IAGvC,GADAA,EAAMA,EAAKc,MACLD,EAAYb,EAAIe,MACrB,MAAM,IAAIV,UAAWC,EAAQ,QAASN,IAEvC,OA7KJ,SAAyBgB,EAAItB,GAC5B,IAAII,EAIJ,IADAA,EAAM,IAEDkB,EAAGD,OACAE,MAGPnB,EAAIoB,KAAMxB,GAEX,OAAOI,CACR,CAgKWqB,CAAgBnB,EAAKN,EAC5B,CACD,MAAM,IAAIW,UAAWC,EAAQ,QAASN,GACzC,CAAS,GAAKU,EAAeV,GAC1B,MAAM,IAAIW,MAAOL,EAAO,UAEzB,MAAM,IAAID,UAAWC,EAAQ,QAASN,GACtC,CACD,GAAKL,GAAS,EACb,OAAO,IAAIE,EAAM,GAElB,GAAe,IAAVF,EAEJ,GAAKa,EADLR,EAAMC,UAAW,IAEhBH,EAAM,IAAID,EAAMG,EAAIE,aACd,GAAKQ,EAAeV,GAC1BF,EAAM,IAAID,EAAMG,QACV,GAAKO,EAAsBP,GACjCF,EAAM,IAAID,EAAMG,OACV,KAAKY,EAAUZ,GAarB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAZtC,IAA6B,IAAxBZ,EACJ,MAAM,IAAIiB,UAAWC,EAAQ,QAASN,IAEvC,IAAMa,EAAYb,EAAKc,IACtB,MAAM,IAAIT,UAAWC,EAAQ,QAASN,IAGvC,GADAA,EAAMA,EAAKc,MACLD,EAAYb,EAAIe,MACrB,MAAM,IAAIV,UAAWC,EAAQ,QAASN,IAEvCF,EAAM,IAAID,EAAMuB,EAAYpB,GAG5B,MAEDF,EADqB,IAAVH,EACL,IAAIE,EAAMI,UAAU,GAAIA,UAAU,IAElC,IAAIJ,EAAMI,UAAU,GAAIA,UAAU,GAAIA,UAAU,IASvD,OAPKH,EAAII,OAAS,IACZ,WAAWmB,KAAMzB,GA9LxB,SAA0BE,EAAKJ,GAC9B,IAAI4B,EACJ,IAAMA,EAAI,EAAGA,EAAIxB,EAAII,OAAQoB,IAC5BxB,EAAIyB,IAAK7B,EAAO4B,EAGlB,CAyLGE,CAAiB1B,EAAKG,UAAW,IAEjCwB,EAAO3B,EAAII,OAAQD,UAAW,GAAKH,EAAK,IAGnCA,CACR"}